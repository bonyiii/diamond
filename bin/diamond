#!/usr/bin/env ruby
# encoding: UTF-8

require 'rubygems'
require 'commander/import'
require 'yaml'
require 'json'

require 'rack'
require "pathname"
require 'coffee-script'
require 'haml'
require 'sass'
require 'rack'
require 'renee'
require 'thin'
require 'rake'
require 'hpricot'
require 'zip/zip'

require_relative '../lib/builder'
require_relative '../lib/app'
require_relative '../lib/extensions'
require_relative '../lib/server'

program :name, 'Diamond'
program :version, '0.0.1'
program :description, ' Development Enviroment for Chrome / Node-Webkit apps'

global_option('-e', '--env STRING', 'envirnoment') { |env| $env = env }

bin_file = Pathname.new(__FILE__).realpath
$:.unshift File.expand_path("../../lib", bin_file)
$dirname = File.dirname(File.expand_path(File.dirname bin_file))

$env = 'development' unless $env

$app = App.new
$app.load_config

command :nw do |c|
  c.syntax = ''
  c.description = ''
  c.action do |args,options|
    puts "Running nw"
    silence_stream(STDOUT) do
      $app.run_node_webkit
    end
  end
end

command :server do |c|
  c.action do |args,options|
    statics = Dir.glob($app.assets_dir+"/*/").map {|dir| "/"+File.basename(dir)}
    puts "Server started..."
    #silence_stream(STDOUT) do
      builder = Rack::Builder.new {
        use Rack::Static, :urls => statics, :root => $app.assets_dir
        run Server
      }
      Rack::Handler::Thin.run builder, :Port => 9292
    #end
  end
end

command :specs do |c|
  $app.compile_specs
  c.action do |args,options|
    job1 = 0
    silence_stream(STDOUT) do
      job1 = fork do
        statics = Dir.glob($app.assets_dir+"/*/").map {|dir| "/"+File.basename(dir)}
        builder = Rack::Builder.new {
          use Rack::Static, :urls => statics, :root => $app.assets_dir
          run Server
        }
        Rack::Handler::Thin.run builder, :Port => 5000
      end
    end
    sleep 5
    Process.detach(job1)
    puts `phantomjs #{$dirname+"/assets/script.coffee"} http://localhost:5000/specs`
    Process.kill "KILL", job1
  end

end

command :build do |c|
  c.syntax = ''
  c.description = ''
  c.action do |args,options|
    $app.build app.build_dir
  end
end

command :cleanup do |c|
  c.action do |args,options|
    `rm -rf app.nw .nw_build .build packages/linux32 packages/linux64 packages/win32 packages/mac32`
  end
end

command :package do |c|
  c.option '--platform STRING', String, 'win32 / linux32 / linux64 / mac32 / all'
  c.option '--[no-]zip','Zip packages'
  c.option '--[no-]webstore','Webstore'
  c.action do |args,options|
    options.default :platform => 'all', :zip => true, :webstore => true

    $env = 'production'
    `rm -rf packages`
    `mkdir packages`
    if options.webstore
      puts "Packaging for Chrome Web Store"
      $app.build_chrome
      `cd .build && zip -r ../packages/#{$app.config[:app][:name].downcase}-cws.zip *`
    end

    puts "Packaging for Platforms:"

    $app.build_node_webkit

    Zip::ZipFile.open('app.nw',Zip::ZipFile::CREATE) do |zip|
      Dir.glob(".nw_build/**/*") do |file|
        zip.add file.gsub('.nw_build/',''), file
      end
    end

    case options.platform
      when "linux32"
        puts "  > Linux 32bit"
        $app.linux32
      when "linux64"
        puts "  > Linux 64bit"
        $app.linux64
      when "win32"
        puts "  > Windows 32bit"
        $app.win32
      when "mac32"
        puts "  > Mac 32bit"
        $app.mac32
      when "all"
        puts "  > Linux 32bit"
        $app.linux32
        puts "  > Linux 64bit"
        $app.linux64
        puts "  > Windows 32bit"
        $app.win32
        puts "  > Mac 32bit"
        $app.mac32
    end

    if options.zip
      puts "Zipping packages:"
      puts "  > Linux 32bit"
      `cd packages/linux32 && zip -r ../#{$app.config[:app][:name].downcase}-linux32.zip *`
      puts "  > Linux 64bit"
      `cd packages/linux64 && zip -r ../#{$app.config[:app][:name].downcase}-linux64.zip *`
      puts "  > Windows 32bit"
      `cd packages/win32 && zip -r ../#{$app.config[:app][:name].downcase}-win32.zip *`
      puts "  > Mac 32bit"
      `cd packages/mac32/ && mv node-webkit.app #{$app.config[:app][:name].downcase}.app && zip -r ../#{$app.config[:app][:name].downcase}-mac32.zip *`
    end
    puts "Cleaning up"
    `rm -rf app.nw .nw_build .build`
    if options.zip
      `rm -rf packages/linux32 packages/linux64 packages/win32 packages/mac32`
    end
  end
end